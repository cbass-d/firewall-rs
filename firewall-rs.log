12:06:49.870 [INFO] cli_log::init: Starting firewall-rs v0.1.0 with log level DEBUG
12:06:49.870 [DEBUG] firewall_rs: Starting CLI
12:06:49.871 [DEBUG] firewall_rs::netlink: Creating test table
12:06:49.872 [DEBUG] mnl::socket: Sending 360 byte netlink message
12:06:49.872 [DEBUG] mnl::callback: Processing 36 byte netlink message without a callback
12:06:49.872 [DEBUG] firewall_rs::app: Running app
12:06:49.872 [DEBUG] rustables::query: Listing objects of kind 1
12:06:49.873 [DEBUG] rustables::query: Calling parse_nlmsg
12:06:49.873 [DEBUG] rustables::query: Got a valid netlink message: nlmsghdr { nlmsg_len: 60, nlmsg_type: 2560, nlmsg_flags: 2, nlmsg_seq: 0, nlmsg_pid: 4417 } NfGenMsg(nfgenmsg { nfgen_family: 1, version: 0, res_id: 768 }, [11, 0, 1, 0, 102, 105, 108, 116, 101, 114, 0, 0, 8, 0, 3, 0, 0, 0, 0, 2, 12, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 6, 8, 0, 2, 0, 0, 0, 0, 0])
12:06:49.873 [DEBUG] rustables::query: Calling Object::deserialize()
12:06:49.873 [DEBUG] rustables::parser: parse_object() started
12:06:49.873 [DEBUG] rustables::parser: Calling <rustables::table::Table as NfNetlinkDeserialize>::deserialize()
12:06:49.873 [DEBUG] rustables::table: Decoding attribute 1 in type rustables::table::Table
12:06:49.873 [DEBUG] rustables::table: Calling alloc::string::String::deserialize()
12:06:49.873 [DEBUG] rustables::table: Decoding attribute 3 in type rustables::table::Table
12:06:49.873 [INFO] rustables::parser: Ignoring unsupported attribute type 3 for type rustables::table::Table
12:06:49.873 [DEBUG] rustables::table: Decoding attribute 4 in type rustables::table::Table
12:06:49.873 [INFO] rustables::parser: Ignoring unsupported attribute type 4 for type rustables::table::Table
12:06:49.873 [DEBUG] rustables::table: Decoding attribute 2 in type rustables::table::Table
12:06:49.873 [DEBUG] rustables::table: Calling u32::deserialize()
12:06:49.873 [DEBUG] rustables::query: Calling parse_nlmsg
12:06:49.873 [DEBUG] rustables::query: Got a valid netlink message: nlmsghdr { nlmsg_len: 64, nlmsg_type: 2560, nlmsg_flags: 2, nlmsg_seq: 0, nlmsg_pid: 4417 } NfGenMsg(nfgenmsg { nfgen_family: 1, version: 0, res_id: 768 }, [15, 0, 1, 0, 116, 101, 115, 116, 45, 116, 97, 98, 108, 101, 0, 0, 8, 0, 3, 0, 0, 0, 0, 1, 12, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 0, 2, 0, 0, 0, 0, 0])
12:06:49.873 [DEBUG] rustables::query: Calling Object::deserialize()
12:06:49.873 [DEBUG] rustables::parser: parse_object() started
12:06:49.873 [DEBUG] rustables::parser: Calling <rustables::table::Table as NfNetlinkDeserialize>::deserialize()
12:06:49.873 [DEBUG] rustables::table: Decoding attribute 1 in type rustables::table::Table
12:06:49.873 [DEBUG] rustables::table: Calling alloc::string::String::deserialize()
12:06:49.873 [DEBUG] rustables::table: Decoding attribute 3 in type rustables::table::Table
12:06:49.873 [INFO] rustables::parser: Ignoring unsupported attribute type 3 for type rustables::table::Table
12:06:49.873 [DEBUG] rustables::table: Decoding attribute 4 in type rustables::table::Table
12:06:49.873 [INFO] rustables::parser: Ignoring unsupported attribute type 4 for type rustables::table::Table
12:06:49.873 [DEBUG] rustables::table: Decoding attribute 2 in type rustables::table::Table
12:06:49.873 [DEBUG] rustables::table: Calling u32::deserialize()
12:06:49.873 [DEBUG] rustables::query: Calling parse_nlmsg
12:06:49.873 [DEBUG] rustables::query: Got a valid netlink message: nlmsghdr { nlmsg_len: 20, nlmsg_type: 3, nlmsg_flags: 2, nlmsg_seq: 0, nlmsg_pid: 4417 } Done
12:06:49.879 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:49.885 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:49.887 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:49.887 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:49.887 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:49.887 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:49.887 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:49.887 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:49.887 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:49.887 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:49.887 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:50.876 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:50.880 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:50.888 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:50.888 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:50.888 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:50.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:50.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:50.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:50.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:50.889 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:50.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:51.062 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Char('r'), modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:06:51.062 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:06:51.063 [DEBUG] firewall_rs::app::app_router: Sending SelectTableList
12:06:51.063 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:51.066 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:51.069 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:51.069 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:51.069 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:51.069 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:51.070 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:51.070 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:51.070 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:51.070 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:51.070 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:51.075 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:51.079 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:51.080 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:51.080 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:51.081 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:51.081 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:51.081 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:51.081 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:51.081 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:51.081 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:51.081 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:51.206 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Right, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:06:51.206 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:06:51.206 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:51.211 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:51.213 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:51.214 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:51.214 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:51.214 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:51.214 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:51.214 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:51.214 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:51.214 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:51.214 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:51.581 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Down, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:06:51.582 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:06:51.582 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:51.587 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:51.588 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:51.588 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:51.588 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:51.588 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:51.588 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:51.588 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:51.588 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:51.588 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:51.588 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:51.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:51.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:51.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:51.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:51.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:51.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:51.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:51.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:51.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:51.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:51.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:51.905 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Right, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:06:51.905 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:06:51.905 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:51.908 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:51.910 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:51.910 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:51.910 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:51.910 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:51.910 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:51.910 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:51.910 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:51.910 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:51.910 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:52.247 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Down, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:06:52.247 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:06:52.248 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:52.253 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:52.255 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:52.255 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:52.255 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:52.255 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:52.255 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:52.255 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:52.255 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:52.256 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:52.256 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:52.615 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Right, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:06:52.615 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:06:52.616 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:52.619 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:52.621 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:52.621 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:52.621 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:52.621 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:52.621 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:52.621 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:52.621 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:52.622 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:52.622 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:52.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:52.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:52.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:52.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:52.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:52.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:52.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:52.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:52.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:52.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:52.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:53.043 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Left, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:06:53.043 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:06:53.044 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:53.049 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:53.051 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:53.052 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:53.052 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:53.052 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:53.052 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:53.052 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:53.052 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:53.052 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:53.052 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:53.516 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Right, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:06:53.516 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:06:53.517 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:53.521 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:53.523 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:53.523 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:53.523 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:53.523 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:53.523 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:53.523 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:53.523 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:53.524 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:53.524 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:53.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:53.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:53.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:53.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:53.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:53.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:53.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:53.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:53.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:53.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:53.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:53.891 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Down, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:06:53.891 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:06:53.891 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:53.894 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:53.895 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:53.895 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:53.896 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:53.896 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:53.896 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:53.896 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:53.896 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:53.896 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:53.896 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:54.249 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Up, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:06:54.249 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:06:54.249 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:54.253 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:54.255 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:54.255 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:54.255 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:54.255 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:54.255 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:54.255 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:54.255 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:54.256 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:54.256 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:54.441 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Left, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:06:54.441 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:06:54.442 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:54.446 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:54.447 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:54.447 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:54.447 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:54.447 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:54.447 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:54.447 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:54.447 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:54.447 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:54.447 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:54.658 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Down, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:06:54.658 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:06:54.659 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:54.664 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:54.666 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:54.666 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:54.666 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:54.666 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:54.666 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:54.666 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:54.666 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:54.666 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:54.666 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:54.808 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Down, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:06:54.808 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:06:54.808 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:54.812 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:54.815 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:54.815 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:54.815 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:54.815 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:54.815 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:54.815 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:54.815 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:54.816 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:54.816 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:54.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:54.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:54.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:54.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:54.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:54.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:54.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:54.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:54.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:54.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:54.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:54.993 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Right, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:06:54.994 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:06:54.994 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:54.999 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:55.001 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:55.001 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:55.002 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:55.002 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:55.002 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:55.002 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:55.002 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:55.002 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:55.002 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:55.521 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Down, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:06:55.521 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:06:55.521 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:55.526 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:55.529 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:55.529 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:55.529 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:55.529 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:55.529 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:55.529 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:55.529 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:55.530 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:55.530 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:55.720 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Right, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:06:55.720 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:06:55.721 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:55.726 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:55.729 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:55.729 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:55.729 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:55.730 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:55.730 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:55.730 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:55.730 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:55.730 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:55.730 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:55.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:55.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:55.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:55.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:55.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:55.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:55.890 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:55.890 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:55.890 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:55.890 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:55.890 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:56.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:56.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:56.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:56.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:56.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:56.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:56.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:56.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:56.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:56.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:56.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:57.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:57.880 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:57.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:57.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:57.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:57.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:57.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:57.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:57.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:57.883 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(4), bytes: Some(272) })))]
12:06:57.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:58.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:58.880 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(5), bytes: Some(340) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:58.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:58.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:58.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:58.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:58.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:58.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:58.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:58.883 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(5), bytes: Some(340) })))]
12:06:58.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:59.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:06:59.880 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(5), bytes: Some(340) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:06:59.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:06:59.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:06:59.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:06:59.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:06:59.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:06:59.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:06:59.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:06:59.883 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(5), bytes: Some(340) })))]
12:06:59.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:00.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:00.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(5), bytes: Some(340) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:00.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:00.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:00.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:00.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:00.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:00.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:00.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:00.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(5), bytes: Some(340) })))]
12:07:00.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:01.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:01.881 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(5), bytes: Some(340) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:01.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:01.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:01.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:01.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:01.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:01.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:01.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:01.884 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(5), bytes: Some(340) })))]
12:07:01.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:02.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:02.880 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(5), bytes: Some(340) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:02.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:02.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:02.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:02.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:02.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:02.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:02.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:02.884 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(5), bytes: Some(340) })))]
12:07:02.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:03.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:03.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(5), bytes: Some(340) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:03.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:03.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:03.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:03.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(5), bytes: Some(340) })))]
12:07:03.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:04.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:04.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(6), bytes: Some(408) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:04.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:04.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:04.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:04.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:04.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:04.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:04.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:04.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(6), bytes: Some(408) })))]
12:07:04.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:05.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:05.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(6), bytes: Some(408) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:05.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(6), bytes: Some(408) })))]
12:07:05.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:06.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:06.880 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(6), bytes: Some(408) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:06.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:06.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:06.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:06.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:06.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:06.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:06.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:06.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(6), bytes: Some(408) })))]
12:07:06.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:07.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:07.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(6), bytes: Some(408) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:07.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:07.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:07.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:07.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:07.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:07.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:07.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:07.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(6), bytes: Some(408) })))]
12:07:07.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:08.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:08.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(6), bytes: Some(408) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:08.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:08.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:08.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:08.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:08.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:08.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:08.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:08.884 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(6), bytes: Some(408) })))]
12:07:08.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:09.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:09.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(6), bytes: Some(408) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(6), bytes: Some(408) })))]
12:07:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:10.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:10.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(7), bytes: Some(476) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:10.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:10.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:10.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:10.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:10.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:10.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:10.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:10.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(7), bytes: Some(476) })))]
12:07:10.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:11.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:11.880 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(7), bytes: Some(476) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:11.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:11.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:11.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:11.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(7), bytes: Some(476) })))]
12:07:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:12.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:12.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(7), bytes: Some(476) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:12.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:12.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:12.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:12.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:12.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:12.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:12.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:12.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(7), bytes: Some(476) })))]
12:07:12.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:13.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:13.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(544) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:13.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:13.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:13.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:13.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(544) })))]
12:07:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:14.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:14.880 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(544) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:14.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:14.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:14.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:14.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:14.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:14.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:14.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:14.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(544) })))]
12:07:14.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:15.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:15.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(544) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:15.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:15.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:15.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:15.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:15.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:15.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:15.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:15.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(544) })))]
12:07:15.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:16.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:16.880 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(544) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:16.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:16.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:16.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:16.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:16.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:16.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:16.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:16.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(544) })))]
12:07:16.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:17.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:17.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(544) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:17.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:17.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:17.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:17.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:17.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:17.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:17.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:17.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(544) })))]
12:07:17.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:18.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:18.880 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(544) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:18.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:18.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:18.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:18.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:18.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:18.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:18.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:18.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(544) })))]
12:07:18.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:19.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:19.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(544) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:19.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:19.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:19.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:19.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:19.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:19.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:19.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:19.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(544) })))]
12:07:19.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:20.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:20.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(544) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:20.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:20.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:20.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:20.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:20.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:20.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:20.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:20.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(544) })))]
12:07:20.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:21.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:21.880 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(544) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:21.885 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:21.886 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:21.886 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:21.886 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:21.886 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:21.886 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:21.886 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:21.886 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(544) })))]
12:07:21.886 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:22.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:22.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:22.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:22.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:22.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:22.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:22.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:22.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:22.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:22.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:22.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:23.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:23.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:23.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:23.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:23.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:23.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:23.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:23.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:23.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:23.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:23.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:24.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:24.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:24.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:24.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:25.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:25.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:25.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:25.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:25.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:25.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:25.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:25.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:25.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:25.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:25.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:26.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:26.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:27.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:27.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:27.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:27.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:27.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:27.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:27.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:27.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:27.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:27.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:27.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:28.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:28.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:28.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:28.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:28.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:28.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:28.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:28.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:28.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:28.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:28.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:29.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:29.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:29.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:29.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:29.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:29.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:29.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:29.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:29.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:29.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:29.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:30.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:30.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:30.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:31.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:31.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:31.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:31.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:31.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:31.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:31.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:31.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:31.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:31.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:31.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:32.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:32.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:32.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:32.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:32.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:32.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:32.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:32.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:32.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:32.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:32.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:33.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:33.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:33.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:33.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:33.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:33.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:33.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:33.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:33.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:33.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:33.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:34.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:34.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:34.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:34.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:34.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:34.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:34.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:34.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:34.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:34.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:34.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:35.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:35.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:35.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:35.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:35.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:35.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:35.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:35.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:35.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:35.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:35.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:36.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:36.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:36.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:36.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:36.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:36.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:36.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:36.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:36.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:36.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:36.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:37.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:37.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:37.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:37.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:37.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:37.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:37.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:37.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:37.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:37.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:37.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:38.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:38.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:38.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:38.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:38.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:38.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:38.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:38.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:38.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:38.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:38.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:39.872 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:39.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:39.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:39.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:39.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:39.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:39.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:39.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:39.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:39.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:39.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:40.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:40.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:40.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:40.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:40.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:40.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:40.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:40.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:40.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:40.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:40.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:41.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:41.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:41.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:41.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:41.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:41.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:41.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:41.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:41.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:41.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:41.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:42.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:42.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:42.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:42.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:42.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:42.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:42.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:42.885 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:42.885 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:42.885 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:42.885 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:43.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:43.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:43.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:43.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:43.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:43.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:43.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:43.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:43.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:43.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:43.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:44.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:44.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:44.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:44.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:44.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:44.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:44.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:44.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:44.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:44.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:44.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:45.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:45.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:45.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:45.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:45.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:45.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:45.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:45.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:45.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:45.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:45.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:46.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:46.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:46.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:46.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:46.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:46.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:46.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:46.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:46.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:46.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:46.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:47.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:47.880 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:47.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:47.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:47.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:47.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:47.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:47.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:47.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:47.883 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(612) })))]
12:07:47.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:48.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:48.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(680) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:48.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:48.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:48.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:48.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:48.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:48.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:48.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:48.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(680) })))]
12:07:48.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:49.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:49.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(680) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:49.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:49.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:49.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:49.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:49.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:49.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:49.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:49.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(680) })))]
12:07:49.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:50.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:50.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(11), bytes: Some(748) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:50.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:50.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:50.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:50.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:50.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:50.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:50.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:50.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(11), bytes: Some(748) })))]
12:07:50.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:51.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:51.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(11), bytes: Some(748) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:51.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:51.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:51.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:51.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:51.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:51.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:51.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:51.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(11), bytes: Some(748) })))]
12:07:51.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:52.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:52.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(11), bytes: Some(748) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:52.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:52.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:52.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:52.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:52.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:52.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:52.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:52.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(11), bytes: Some(748) })))]
12:07:52.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:53.872 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:53.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:53.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:53.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:53.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:53.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:53.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:53.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:53.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:53.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:07:53.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:54.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:54.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:54.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:54.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:54.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:54.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:54.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:54.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:54.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:54.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:07:54.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:55.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:55.880 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:55.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:55.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:55.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:55.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:55.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:55.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:55.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:55.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:07:55.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:56.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:56.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:56.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:56.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:56.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:56.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:56.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:56.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:56.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:56.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:07:56.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:57.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:57.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:57.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:57.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:57.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:57.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:57.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:57.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:57.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:57.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:07:57.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:58.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:58.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:07:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:59.872 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:07:59.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:07:59.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:07:59.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:07:59.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:07:59.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:07:59.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:07:59.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:07:59.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:07:59.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:07:59.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:00.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:00.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:00.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:00.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:00.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:00.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:00.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:00.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:00.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:00.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:00.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:01.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:01.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:01.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:01.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:01.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:01.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:01.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:01.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:01.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:01.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:01.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:02.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:02.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:02.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:02.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:02.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:02.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:02.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:02.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:02.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:02.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:02.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:03.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:03.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:03.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:03.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:03.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:03.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:03.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:03.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:03.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:03.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:03.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:04.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:04.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:04.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:04.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:04.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:04.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:04.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:04.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:04.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:04.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:04.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:05.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:05.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:05.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:05.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:05.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:05.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:05.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:05.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:05.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:05.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:05.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:06.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:06.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:06.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:06.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:06.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:06.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:06.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:06.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:06.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:06.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:06.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:07.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:07.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:07.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:07.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:07.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:07.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:07.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:07.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:07.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:07.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:07.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:08.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:08.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:08.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:08.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:08.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:08.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:08.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:08.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:08.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:08.877 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:08.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:09.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:09.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:09.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:09.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:09.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:09.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:09.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:09.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:09.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:09.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:09.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:10.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:10.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:10.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:10.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:10.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:10.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:10.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:10.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:10.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:10.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:10.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:11.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:11.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:11.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:11.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:11.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:11.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:11.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:11.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:11.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:11.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:11.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:12.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:12.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:12.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:12.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:12.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:12.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:12.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:12.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:12.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:12.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:12.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:13.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:13.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:13.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:13.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:14.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:14.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:14.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:14.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:14.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:14.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:14.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:14.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:14.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:14.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:14.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:15.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:15.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:15.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:15.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:15.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:15.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:15.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:15.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:15.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:15.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:15.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:16.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:16.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:16.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:16.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:16.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:16.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:16.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:16.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:16.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:16.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:16.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:17.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:17.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:17.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:17.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:17.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:17.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:17.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:17.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:17.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:17.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:17.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:18.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:18.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:18.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:18.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:18.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:18.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:18.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:18.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:18.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:18.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:18.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:19.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:19.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:19.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:19.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:19.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:19.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:19.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:19.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:19.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:19.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:19.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:20.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:20.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:20.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:20.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:20.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:20.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:20.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:20.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:20.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:20.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:20.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:21.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:21.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:21.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:21.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:21.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:21.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:21.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:21.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:21.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:21.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:21.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:22.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:22.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:22.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:22.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:22.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:22.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:22.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:22.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:22.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:22.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(12), bytes: Some(816) })))]
12:08:22.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:23.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:23.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:23.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:23.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:23.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:23.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:23.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:23.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:23.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:23.877 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:23.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:24.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:24.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:25.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:25.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:25.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:25.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:25.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:25.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:25.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:25.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:25.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:25.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:25.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:26.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:26.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:26.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:26.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:26.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:26.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:26.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:26.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:26.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:26.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:26.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:27.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:27.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:27.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:27.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:27.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:27.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:27.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:27.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:27.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:27.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:27.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:28.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:28.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:28.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:28.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:28.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:28.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:28.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:28.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:28.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:28.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:28.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:29.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:29.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:29.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:29.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:29.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:29.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:29.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:29.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:29.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:29.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:29.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:30.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:30.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:30.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:30.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:30.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:30.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:30.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:30.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:30.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(8), bytes: Some(2040) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:30.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:30.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:31.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:31.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:31.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:31.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:31.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:31.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:31.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:31.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:31.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:31.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:31.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:32.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:32.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:32.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:32.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:32.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:32.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:32.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:32.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:32.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:32.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:32.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:33.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:33.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:33.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:33.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:33.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:33.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:33.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:33.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:33.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:33.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:33.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:34.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:34.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:34.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:34.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:34.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:34.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:34.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:34.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:34.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:34.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:34.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:35.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:35.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:35.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:35.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:35.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:35.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:35.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:35.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:35.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:35.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:35.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:36.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:36.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:36.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:36.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:36.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:36.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:36.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:36.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:36.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:36.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:36.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:37.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:37.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:37.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:37.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:37.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:37.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:37.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:37.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:37.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:37.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:37.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:38.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:38.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:38.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:38.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:38.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:38.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:38.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:38.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:38.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:38.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:38.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:39.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:39.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:39.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:39.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:39.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:39.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:39.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:39.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:39.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:39.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:39.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:40.872 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:40.875 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:40.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:40.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:40.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:40.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:40.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:40.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:40.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:40.883 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:40.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:41.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:41.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:41.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:41.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:41.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:41.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:41.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:41.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:41.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:41.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:41.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:42.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:42.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:42.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:42.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:42.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:42.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:42.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:42.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:42.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:42.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:42.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:43.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:43.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:43.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:43.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:43.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:43.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:43.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:43.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:43.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:43.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:43.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:44.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:44.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:44.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:44.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:44.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:44.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:44.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:44.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:44.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:44.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:44.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:45.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:45.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:45.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:45.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:45.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:45.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:45.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:45.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:45.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:45.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:45.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:46.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:46.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:46.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:46.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:46.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:46.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:46.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:46.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:46.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:46.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:46.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:47.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:47.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:47.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:47.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:47.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:47.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:47.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:47.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:47.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:47.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:47.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:48.872 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:48.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:48.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:48.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:48.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:48.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:48.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:48.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:48.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:48.877 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:48.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:49.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:49.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:49.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:49.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:49.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:49.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:49.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:49.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:49.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:49.877 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:49.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:50.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:50.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:50.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:50.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:50.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:50.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:50.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:50.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:50.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:50.889 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:50.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:51.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:51.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:51.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:51.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:51.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:51.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:51.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:51.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:51.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:51.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:51.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:52.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:52.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:52.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:52.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:52.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:52.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:52.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:52.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:52.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:52.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(13), bytes: Some(884) })))]
12:08:52.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:53.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:53.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:53.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:53.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:53.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:53.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:53.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:53.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:53.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:53.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:08:53.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:54.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:54.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:54.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:54.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:54.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:54.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:54.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:54.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:54.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:54.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:08:54.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:55.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:55.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:55.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:55.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:55.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:55.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:55.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:55.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:55.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:55.877 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:08:55.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:56.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:56.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:56.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:56.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:56.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:56.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:56.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:56.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:56.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:56.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:08:56.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:57.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:57.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:57.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:57.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:57.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:57.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:57.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:57.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:57.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:57.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:08:57.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:58.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:58.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:58.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:08:58.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:59.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:08:59.875 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:08:59.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:08:59.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:08:59.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:08:59.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:08:59.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:08:59.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:08:59.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:08:59.876 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:08:59.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:00.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:00.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:00.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:00.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:00.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:00.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:00.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:00.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:00.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:00.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:00.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:01.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:01.875 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:01.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:01.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:01.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:01.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:01.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:01.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:01.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:01.883 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:01.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:02.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:02.880 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:03.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:03.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:03.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:03.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:03.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:03.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:03.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:03.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:03.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:03.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:04.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:04.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:04.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:04.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:04.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:04.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:04.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:04.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:04.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:04.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:04.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:05.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:05.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:05.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:05.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:05.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:05.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:05.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:05.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:05.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:05.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:05.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:06.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:06.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:06.887 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:06.887 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:06.887 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:06.887 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:06.887 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:06.887 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:06.887 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:06.887 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:06.887 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:07.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:07.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:07.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:07.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:07.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:07.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:07.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:07.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:07.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:07.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:07.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:08.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:08.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:08.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:08.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:08.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:08.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:08.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:08.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:08.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:08.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:08.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:09.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:09.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:09.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:09.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:09.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:09.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:09.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:09.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:09.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:09.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:09.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:10.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:10.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:10.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:10.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:10.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:10.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:10.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:10.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:10.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:10.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:10.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:11.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:11.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:11.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:11.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:11.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:11.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:11.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:11.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:11.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:11.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:11.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:12.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:12.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:12.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:12.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:12.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:12.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:12.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:12.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:12.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:12.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:12.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:13.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:13.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:13.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:13.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:13.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:13.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:13.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:13.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:13.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:13.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:14.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:14.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:14.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:14.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:14.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:14.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:14.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:14.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:14.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:14.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:14.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:15.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:15.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:15.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:15.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:15.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:15.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:15.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:15.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:15.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:15.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:15.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:16.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:16.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:16.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:16.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:16.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:16.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:16.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:16.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:16.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:16.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:16.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:17.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:17.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:17.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:17.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:17.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:17.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:17.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:17.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:17.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:17.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:17.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:18.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:18.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:18.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:18.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:18.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:18.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:18.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:18.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:18.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:18.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:18.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:19.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:19.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:19.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:19.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:19.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:19.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:19.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:19.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:19.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:19.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:19.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:20.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:20.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:20.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:20.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:20.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:20.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:20.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:20.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:20.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:20.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:20.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:21.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:21.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:21.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:21.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:21.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:21.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:21.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:21.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:21.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:21.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:21.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:22.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:22.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:22.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:22.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:22.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:22.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:22.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:22.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:22.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:22.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(14), bytes: Some(952) })))]
12:09:22.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:23.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:23.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:23.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:23.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:23.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:23.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:23.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:23.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:23.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:23.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:23.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:24.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:24.880 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:24.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:24.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:24.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:24.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:24.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:24.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:24.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:24.883 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:24.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:25.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:25.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:25.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:25.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:25.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:25.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:25.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:25.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:25.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:25.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:25.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:26.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:26.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:27.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:27.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:27.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:27.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:27.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:27.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:27.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:27.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:27.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:27.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:27.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:28.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:28.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:28.890 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:28.890 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:28.890 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:28.891 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:28.891 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:28.891 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:28.891 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:28.891 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:28.891 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:29.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:29.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:29.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:29.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:29.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:29.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:29.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:29.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:29.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:29.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:29.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:30.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:30.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:30.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:30.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:30.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:31.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:31.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:31.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:31.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:31.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:31.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:31.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:31.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:31.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:31.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:31.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:32.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:32.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:32.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:32.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:32.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:32.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:32.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:32.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:32.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:32.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:32.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:33.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:33.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:33.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:33.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:33.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:33.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:33.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:33.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:33.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:33.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:33.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:34.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:34.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:34.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:34.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:34.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:34.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:34.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:34.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:34.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:34.883 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:34.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:35.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:35.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:35.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:35.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:35.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:35.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:35.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:35.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:35.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:35.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:35.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:36.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:36.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:36.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:36.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:36.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:36.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:36.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:36.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:36.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:36.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:36.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:37.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:37.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:37.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:37.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:37.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:37.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:37.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:37.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:37.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:37.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:37.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:38.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:38.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:38.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:38.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:38.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:38.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:38.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:38.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:38.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:38.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:38.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:39.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:39.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:39.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:39.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:39.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:39.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:39.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:39.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:39.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:39.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:39.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:40.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:40.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:40.888 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:40.888 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:40.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:40.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:40.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:40.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:40.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:40.889 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:40.889 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:41.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:41.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:41.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:41.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:41.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:41.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:41.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:41.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:41.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:41.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:41.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:42.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:42.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:42.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:42.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:42.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:42.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:42.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:42.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:42.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:42.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:42.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:43.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:43.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:43.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:43.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:43.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:43.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:43.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:43.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:43.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:43.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:43.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:44.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:44.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:44.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:44.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:44.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:44.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:44.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:44.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:44.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:44.877 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:44.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:45.872 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:45.875 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:45.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:45.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:45.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:45.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:45.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:45.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:45.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:45.877 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:45.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:46.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:46.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:46.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:46.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:46.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:46.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:46.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:46.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:46.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:46.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:46.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:47.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:47.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:47.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:47.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:47.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:47.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:47.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:47.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:47.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:47.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:47.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:48.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:48.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:48.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:48.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:48.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:48.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:48.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:48.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:48.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:48.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:48.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:49.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:49.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:49.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:49.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:49.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:49.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:49.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:49.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:49.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:49.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:49.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:50.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:50.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:50.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:50.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:50.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:50.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:50.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:50.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:50.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:50.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:50.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:51.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:51.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:51.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:51.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:51.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:51.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:51.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:51.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:51.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:51.877 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:51.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:52.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:52.875 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:52.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:52.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:52.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:52.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:52.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:52.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:52.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:52.877 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(15), bytes: Some(1020) })))]
12:09:52.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:53.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:53.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:53.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:53.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:53.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:53.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:53.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:53.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:53.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:53.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:09:53.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:54.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:54.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:54.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:54.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:54.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:54.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:54.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:54.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:54.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:54.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:09:54.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:55.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:55.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:55.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:55.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:55.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:55.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:55.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:55.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:55.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:55.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:09:55.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:56.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:56.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:56.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:56.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:56.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:56.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:56.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:56.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:56.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:56.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:09:56.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:57.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:57.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:57.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:57.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:57.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:57.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:57.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:57.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:57.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:57.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:09:57.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:58.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:58.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:09:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:59.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:09:59.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:09:59.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:09:59.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:09:59.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:09:59.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:09:59.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:09:59.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:09:59.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:09:59.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:09:59.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:00.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:00.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:00.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:00.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:00.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:00.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:00.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:00.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:00.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:00.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:00.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:01.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:01.875 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:01.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:01.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:01.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:01.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:01.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:01.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:01.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:01.876 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:01.876 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:02.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:02.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:02.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:02.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:02.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:02.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:03.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:03.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:03.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:03.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:04.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:04.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:04.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:04.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:04.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:04.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:04.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:04.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:04.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:04.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:04.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:05.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:05.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:06.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:06.880 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:06.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:06.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:06.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:06.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:06.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:06.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:06.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:06.883 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:06.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:07.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:07.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:07.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:07.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:07.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:07.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:07.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:07.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:07.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:07.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:07.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:08.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:08.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:08.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:08.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:08.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:08.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:08.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:08.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:08.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:08.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:08.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:09.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:09.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:09.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:09.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:09.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:10.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:10.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:10.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:10.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:10.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:10.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:10.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:10.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:10.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:10.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:10.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:11.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:11.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:11.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:12.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:12.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:12.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:12.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:12.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:12.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:12.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:12.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:12.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:12.877 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:12.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:13.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:13.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:13.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:13.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:13.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:13.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:13.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:13.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:13.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:13.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:13.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:14.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:14.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:14.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:14.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:14.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:14.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:14.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:14.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:14.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:14.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:14.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:15.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:15.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:15.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:15.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:15.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:15.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:15.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:15.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:15.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:15.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:15.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:16.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:16.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:16.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:16.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:16.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:16.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:16.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:16.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:16.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:16.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:16.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:17.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:17.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:17.885 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:17.885 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:17.885 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:17.885 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:17.885 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:17.885 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:17.885 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:17.886 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:17.886 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:18.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:18.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:18.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:18.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:18.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:18.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:18.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:18.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:18.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:18.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:18.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:19.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:19.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:19.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:19.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:19.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:19.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:19.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:19.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:19.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:19.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:19.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:20.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:20.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:20.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:20.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:20.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:20.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:20.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:20.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:20.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:20.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:20.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:21.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:21.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:21.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:21.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:21.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:21.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:21.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:21.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:21.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:21.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:21.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:22.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:22.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:22.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:22.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:22.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:22.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:22.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:22.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:22.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:22.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(16), bytes: Some(1088) })))]
12:10:22.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:23.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:23.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:23.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:23.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:23.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:23.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:23.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:23.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:23.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:23.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:23.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:24.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:24.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:24.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:24.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(9), bytes: Some(2295) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:24.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:24.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:25.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:25.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:25.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:25.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:25.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:25.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:25.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:25.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:25.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:25.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:25.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:26.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:26.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:26.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:26.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:26.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:26.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:26.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:26.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:26.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:26.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:27.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:27.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:27.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:27.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:27.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:27.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:27.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:27.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:27.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:27.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:27.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:28.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:28.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:28.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:28.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:28.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:28.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:28.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:28.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:28.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:28.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:28.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:29.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:29.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:29.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:29.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:29.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:29.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:29.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:29.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:29.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:29.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:29.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:30.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:30.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:30.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:30.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:30.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:30.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:31.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:31.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:31.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:31.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:31.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:31.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:31.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:31.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:31.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:31.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:31.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:32.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:32.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:32.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:32.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:32.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:32.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:32.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:32.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:32.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:32.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:32.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:33.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:33.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:33.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:33.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:33.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:33.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:33.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:33.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:33.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:33.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:33.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:34.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:34.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:34.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:34.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:34.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:34.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:34.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:34.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:34.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:34.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:34.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:35.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:35.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:35.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:35.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:35.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:35.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:35.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:35.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:35.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:35.883 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:35.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:36.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:36.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:36.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:36.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:36.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:36.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:36.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:36.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:36.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:36.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:36.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:37.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:37.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:37.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:37.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:37.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:37.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:37.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:37.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:37.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:37.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:37.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:38.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:38.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:38.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:38.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:38.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:38.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:38.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:38.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:38.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:38.883 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:38.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:39.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:39.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:39.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:39.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:39.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:39.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:39.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:39.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:39.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:39.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:39.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:40.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:40.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:40.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:40.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:40.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:40.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:40.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:40.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:40.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:40.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:40.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:41.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:41.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:41.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:41.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:41.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:41.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:41.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:41.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:41.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:41.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:41.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:42.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:42.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:42.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:42.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:42.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:42.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:42.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:42.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:42.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:42.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:42.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:43.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:43.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:43.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:43.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:43.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:43.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:43.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:43.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:43.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:43.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:43.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:44.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:44.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:44.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:44.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:44.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:44.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:44.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:44.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:44.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:44.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:44.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:45.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:45.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:45.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:45.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:45.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:45.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:45.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:45.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:45.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:45.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:45.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:46.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:46.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:46.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:46.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:46.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:46.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:46.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:46.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:46.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:46.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:46.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:47.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:47.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:47.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:47.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:47.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:47.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:47.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:47.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:47.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:47.883 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:47.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:48.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:48.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:48.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:48.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:48.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:48.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:48.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:48.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:48.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:48.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:48.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:49.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:49.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:49.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:49.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:49.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:49.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:49.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:49.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:49.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:49.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:49.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:50.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:50.876 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:50.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:50.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:50.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:50.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:50.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:50.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:50.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:50.878 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:50.878 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:51.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:51.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:51.885 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:51.885 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:51.885 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:51.885 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:51.885 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:51.885 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:51.885 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:51.885 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:51.885 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:52.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:52.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:52.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:52.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:52.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:52.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:52.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:52.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:52.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:52.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(17), bytes: Some(1156) })))]
12:10:52.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:53.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:53.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:53.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:53.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:53.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:53.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:53.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:53.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:53.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:53.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:10:53.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:54.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:54.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:54.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:54.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:54.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:54.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:54.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:54.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:54.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:54.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:10:54.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:55.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:55.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:55.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:55.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:55.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:55.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:55.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:55.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:55.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:55.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:10:55.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:56.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:56.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:56.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:56.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:56.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:56.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:56.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:56.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:56.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:56.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:10:56.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:57.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:57.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:57.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:57.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:57.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:57.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:57.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:57.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:57.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:57.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:10:57.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:58.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:58.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:58.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:58.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:58.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:58.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:58.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:58.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:58.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:58.880 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:10:58.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:59.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:10:59.877 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:10:59.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:10:59.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:10:59.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:10:59.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:10:59.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:10:59.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:10:59.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:10:59.879 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:10:59.879 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:00.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:00.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:00.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:00.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:00.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:00.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:00.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:00.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:00.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:00.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:00.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:01.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:01.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:01.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:01.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:01.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:01.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:01.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:01.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:01.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:01.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:01.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:02.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:02.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:02.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:02.883 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:02.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:03.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:03.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:03.880 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:03.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:04.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:04.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:04.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:04.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:04.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:04.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:04.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:04.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:04.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:04.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:04.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:05.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:05.879 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Up, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:11:05.879 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:11:05.880 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:05.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:05.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:05.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:05.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:05.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:05.886 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:05.890 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:05.891 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:05.891 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:05.891 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:05.891 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:05.891 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:05.891 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:05.892 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:05.892 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:05.892 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:06.091 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Up, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:11:06.091 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:11:06.092 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:06.096 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:06.098 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:06.098 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:06.098 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:06.098 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:06.098 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:06.098 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:06.098 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:06.098 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:06.098 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:06.309 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Left, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:11:06.309 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:11:06.310 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:06.315 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:06.317 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:06.317 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:06.317 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:06.317 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:06.317 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:06.317 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:06.317 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:06.317 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:06.317 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:06.548 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Down, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:11:06.548 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:11:06.549 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:06.554 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:06.556 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:06.556 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:06.556 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:06.556 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:06.556 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:06.556 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:06.556 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:06.557 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:06.557 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:06.749 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Left, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:11:06.749 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:11:06.750 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:06.755 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:06.758 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:06.758 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:06.758 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:06.758 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:06.758 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:06.758 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:06.758 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:06.759 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:06.759 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:06.877 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:06.882 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:06.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:06.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:06.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:06.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:06.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:06.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:06.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:06.884 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:06.884 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:07.217 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Down, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:11:07.217 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:11:07.217 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:07.223 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:07.225 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:07.225 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:07.225 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:07.225 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:07.225 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:07.225 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:07.226 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:07.226 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:07.226 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:07.342 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Right, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:11:07.342 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:11:07.343 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:07.347 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:07.350 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:07.350 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:07.350 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:07.350 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:07.350 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:07.350 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:07.350 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:07.350 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:07.350 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:07.853 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Down, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:11:07.853 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:11:07.854 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:07.859 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:07.861 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:07.862 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:07.862 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:07.862 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:07.862 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:07.862 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:07.862 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:07.862 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:07.862 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:07.872 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:07.875 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:07.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:07.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:07.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:07.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:07.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:07.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:07.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:07.877 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:07.877 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:08.097 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Up, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:11:08.097 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:11:08.098 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:08.103 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:08.106 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:08.106 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:08.106 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:08.106 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:08.106 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:08.106 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:08.106 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:08.106 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:08.106 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:08.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:08.880 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:08.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:08.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:08.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:08.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:08.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:08.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:08.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:08.883 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:08.883 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:09.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:09.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:09.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:09.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:10.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:10.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:10.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:10.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:10.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:10.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:10.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:10.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:10.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:10.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:10.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:11.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:11.878 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:11.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:11.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:12.873 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:12.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:12.890 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:12.891 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:12.891 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:12.891 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:12.891 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:12.891 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:12.891 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:12.891 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:12.891 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:13.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:13.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:13.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:14.654 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Esc, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:11:14.654 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:11:14.654 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:14.660 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:14.663 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:14.664 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:14.664 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:14.664 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:14.664 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:14.664 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:14.664 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:14.664 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:14.664 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:14.669 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:14.672 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:14.673 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:14.673 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:14.673 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:14.673 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:14.673 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:14.673 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:14.674 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:14.674 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:14.674 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:14.874 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:14.879 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:14.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:14.881 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:14.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:14.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:14.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:14.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:14.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:14.882 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:14.882 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:15.026 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Esc, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
12:11:15.027 [DEBUG] firewall_rs::app::event_handler: Ok(())
12:11:15.027 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:15.033 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:15.035 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:15.035 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:15.036 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:15.036 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:15.036 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:15.036 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:15.036 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:15.036 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:15.036 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:15.041 [DEBUG] firewall_rs::app: Quitting app
12:11:15.041 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
12:11:15.045 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(7) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
12:11:15.047 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
12:11:15.047 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
12:11:15.047 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:15.047 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
12:11:15.047 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
12:11:15.047 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
12:11:15.047 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(10), bytes: Some(2550) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
12:11:15.047 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(18), bytes: Some(1224) })))]
12:11:15.047 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
12:11:15.054 [DEBUG] mnl::socket: Sending 84 byte netlink message
12:11:15.054 [DEBUG] mnl::callback: Processing 36 byte netlink message without a callback
12:11:15.064 [DEBUG] firewall_rs::cli: task ended: Ok(())
12:11:15.064 [DEBUG] firewall_rs: CLI exited
