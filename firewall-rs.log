01:37:43.066 [INFO] cli_log::init: Starting firewall-rs v0.1.0 with log level DEBUG
01:37:43.066 [DEBUG] firewall_rs: Starting CLI
01:37:43.066 [DEBUG] firewall_rs::netlink: Creating test table
01:37:43.066 [DEBUG] mnl::socket: Sending 360 byte netlink message
01:37:43.066 [DEBUG] mnl::callback: Processing 36 byte netlink message without a callback
01:37:43.066 [DEBUG] firewall_rs::app: Running app
01:37:43.066 [DEBUG] rustables::query: Listing objects of kind 1
01:37:43.066 [DEBUG] rustables::query: Calling parse_nlmsg
01:37:43.066 [DEBUG] rustables::query: Got a valid netlink message: nlmsghdr { nlmsg_len: 60, nlmsg_type: 2560, nlmsg_flags: 2, nlmsg_seq: 0, nlmsg_pid: 408367 } NfGenMsg(nfgenmsg { nfgen_family: 1, version: 0, res_id: 9984 }, [11, 0, 1, 0, 102, 105, 108, 116, 101, 114, 0, 0, 8, 0, 3, 0, 0, 0, 0, 2, 12, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 6, 8, 0, 2, 0, 0, 0, 0, 0])
01:37:43.066 [DEBUG] rustables::query: Calling Object::deserialize()
01:37:43.066 [DEBUG] rustables::parser: parse_object() started
01:37:43.066 [DEBUG] rustables::parser: Calling <rustables::table::Table as NfNetlinkDeserialize>::deserialize()
01:37:43.067 [DEBUG] rustables::table: Decoding attribute 1 in type rustables::table::Table
01:37:43.067 [DEBUG] rustables::table: Calling alloc::string::String::deserialize()
01:37:43.067 [DEBUG] rustables::table: Decoding attribute 3 in type rustables::table::Table
01:37:43.067 [INFO] rustables::parser: Ignoring unsupported attribute type 3 for type rustables::table::Table
01:37:43.067 [DEBUG] rustables::table: Decoding attribute 4 in type rustables::table::Table
01:37:43.067 [INFO] rustables::parser: Ignoring unsupported attribute type 4 for type rustables::table::Table
01:37:43.067 [DEBUG] rustables::table: Decoding attribute 2 in type rustables::table::Table
01:37:43.067 [DEBUG] rustables::table: Calling u32::deserialize()
01:37:43.067 [DEBUG] rustables::query: Calling parse_nlmsg
01:37:43.067 [DEBUG] rustables::query: Got a valid netlink message: nlmsghdr { nlmsg_len: 64, nlmsg_type: 2560, nlmsg_flags: 2, nlmsg_seq: 0, nlmsg_pid: 408367 } NfGenMsg(nfgenmsg { nfgen_family: 1, version: 0, res_id: 9984 }, [15, 0, 1, 0, 116, 101, 115, 116, 45, 116, 97, 98, 108, 101, 0, 0, 8, 0, 3, 0, 0, 0, 0, 1, 12, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 25, 8, 0, 2, 0, 0, 0, 0, 0])
01:37:43.067 [DEBUG] rustables::query: Calling Object::deserialize()
01:37:43.067 [DEBUG] rustables::parser: parse_object() started
01:37:43.067 [DEBUG] rustables::parser: Calling <rustables::table::Table as NfNetlinkDeserialize>::deserialize()
01:37:43.067 [DEBUG] rustables::table: Decoding attribute 1 in type rustables::table::Table
01:37:43.067 [DEBUG] rustables::table: Calling alloc::string::String::deserialize()
01:37:43.067 [DEBUG] rustables::table: Decoding attribute 3 in type rustables::table::Table
01:37:43.067 [INFO] rustables::parser: Ignoring unsupported attribute type 3 for type rustables::table::Table
01:37:43.067 [DEBUG] rustables::table: Decoding attribute 4 in type rustables::table::Table
01:37:43.067 [INFO] rustables::parser: Ignoring unsupported attribute type 4 for type rustables::table::Table
01:37:43.067 [DEBUG] rustables::table: Decoding attribute 2 in type rustables::table::Table
01:37:43.067 [DEBUG] rustables::table: Calling u32::deserialize()
01:37:43.067 [DEBUG] rustables::query: Calling parse_nlmsg
01:37:43.067 [DEBUG] rustables::query: Got a valid netlink message: nlmsghdr { nlmsg_len: 20, nlmsg_type: 3, nlmsg_flags: 2, nlmsg_seq: 0, nlmsg_pid: 408367 } Done
01:37:43.070 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:43.074 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:43.075 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:43.075 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:43.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:43.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:43.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:43.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:43.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:43.076 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:43.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:43.940 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Char('r'), modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
01:37:43.940 [DEBUG] firewall_rs::app::event_handler: Ok(())
01:37:43.940 [DEBUG] firewall_rs::app::app_router: Sending SelectTableList
01:37:43.941 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:43.947 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:43.950 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:43.950 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:43.950 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:43.950 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:43.950 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:43.950 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:43.950 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:43.951 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:43.951 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:43.952 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:43.956 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:43.957 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:43.957 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:43.957 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:43.957 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:43.958 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:43.958 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:43.958 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:43.958 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:43.958 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:44.073 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:44.078 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:44.081 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:44.081 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:44.081 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:44.081 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:44.081 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:44.081 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:44.081 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:44.081 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:44.081 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:44.225 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Down, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
01:37:44.225 [DEBUG] firewall_rs::app::event_handler: Ok(())
01:37:44.226 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:44.231 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:44.232 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:44.232 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:44.232 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:44.232 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:44.233 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:44.233 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:44.233 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:44.233 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:44.233 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:44.558 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Right, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
01:37:44.558 [DEBUG] firewall_rs::app::event_handler: Ok(())
01:37:44.558 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:44.563 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:44.565 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:44.565 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:44.566 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:44.566 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:44.566 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:44.566 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:44.566 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:44.566 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:44.566 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:44.857 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Down, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
01:37:44.858 [DEBUG] firewall_rs::app::event_handler: Ok(())
01:37:44.858 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:44.863 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:44.865 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:44.865 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:44.866 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:44.866 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:44.866 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:44.866 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:44.866 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:44.866 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:44.866 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:45.067 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:45.071 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:45.073 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:45.073 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:45.073 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:45.073 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:45.073 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:45.073 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:45.073 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:45.074 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:45.074 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:45.636 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Down, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
01:37:45.636 [DEBUG] firewall_rs::app::event_handler: Ok(())
01:37:45.636 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:45.641 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:45.642 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:45.642 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:45.643 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:45.643 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:45.643 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:45.643 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:45.643 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:45.643 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:45.643 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:45.979 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Down, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
01:37:45.979 [DEBUG] firewall_rs::app::event_handler: Ok(())
01:37:45.979 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:45.984 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:45.986 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:45.986 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:45.987 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:45.987 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:45.987 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:45.987 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:45.987 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:45.987 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:45.987 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:46.067 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:46.073 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:46.075 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:46.075 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:46.075 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:46.075 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:46.075 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:46.075 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:46.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:46.076 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:46.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:47.068 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:47.074 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:47.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:47.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:47.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:47.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:47.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:47.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:47.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:47.076 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:47.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:47.095 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Right, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
01:37:47.095 [DEBUG] firewall_rs::app::event_handler: Ok(())
01:37:47.095 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:47.100 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:47.101 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:47.101 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:47.101 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:47.101 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:47.101 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:47.101 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:47.101 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:47.102 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:47.102 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:47.526 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Down, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
01:37:47.526 [DEBUG] firewall_rs::app::event_handler: Ok(())
01:37:47.526 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:47.531 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:47.533 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:47.533 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:47.533 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:47.533 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:47.533 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:47.533 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:47.533 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:47.533 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:47.533 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:48.068 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:48.073 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:48.074 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:48.074 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:48.074 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:48.074 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:48.074 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:48.074 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:48.074 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:48.075 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:48.075 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:48.219 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Up, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
01:37:48.219 [DEBUG] firewall_rs::app::event_handler: Ok(())
01:37:48.219 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:48.223 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:48.225 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:48.225 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:48.225 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:48.225 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:48.225 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:48.225 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:48.225 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:48.225 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:48.226 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:48.412 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Up, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
01:37:48.412 [DEBUG] firewall_rs::app::event_handler: Ok(())
01:37:48.412 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:48.416 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:48.418 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:48.418 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:48.418 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:48.418 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:48.418 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:48.418 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:48.418 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:48.418 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:48.419 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:49.068 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:49.074 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:49.077 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:49.077 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:49.077 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:49.077 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:49.077 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:49.077 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:49.077 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:49.078 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:49.078 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:50.068 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:50.074 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:50.075 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:50.075 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:50.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:50.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:50.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:50.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:50.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:50.076 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:50.077 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:51.068 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:51.074 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:51.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:51.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:51.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:51.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:51.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:51.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:51.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:51.076 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:51.076 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:51.139 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Esc, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
01:37:51.139 [DEBUG] firewall_rs::app::event_handler: Ok(())
01:37:51.139 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:51.145 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:51.147 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:51.147 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:51.147 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:51.147 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:51.147 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:51.147 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:51.147 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:51.147 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:51.147 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:51.149 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:51.153 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:51.154 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:51.154 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:51.154 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:51.154 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:51.154 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:51.154 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:51.154 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:51.154 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2997), bytes: Some(328621) })))]
01:37:51.154 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:51.350 [DEBUG] firewall_rs::app::event_handler: sending: KeyEvent { code: Esc, modifiers: KeyModifiers(0x0), kind: Press, state: KeyEventState(0x0) }
01:37:51.350 [DEBUG] firewall_rs::app::event_handler: Ok(())
01:37:51.350 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:51.356 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2998), bytes: Some(328693) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:51.357 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:51.358 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:51.358 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:51.358 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:51.358 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:51.358 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:51.358 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:51.358 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2998), bytes: Some(328693) })))]
01:37:51.358 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:51.362 [DEBUG] firewall_rs::app: Quitting app
01:37:51.363 [DEBUG] firewall_rs::app::components::tables_list: current tab: 0
01:37:51.367 [DEBUG] firewall_rs::netlink: objects: [ListObject(MetainfoObject(MetainfoObject { version: Some("1.1.3"), release_name: Some("Commodore Bullmoose #4"), json_schema_version: Some(1) })), ListObject(Table(Table { family: INet, name: "filter", handle: Some(6) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "input", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Chain(Chain { family: INet, table: "filter", name: "forward", newname: None, handle: Some(2), _type: Some(Filter), hook: Some(Forward), prio: Some(0), dev: None, policy: Some(Drop) })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)], handle: Some(3), index: None, comment: Some("early drop of invalid connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)], handle: Some(5), index: None, comment: Some("allow tracked connections") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(6), index: None, comment: Some("allow from loopback") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)], handle: Some(7), index: None, comment: Some("allow icmp") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)], handle: Some(8), index: None, comment: Some("allow icmp v6") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)], handle: Some(9), index: None, comment: Some("allow sshd") })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))], handle: Some(10), index: None, comment: None })), ListObject(Rule(Rule { family: INet, table: "filter", chain: "input", expr: [Counter(Anonymous(Some(AnonymousCounter { packets: Some(2998), bytes: Some(328693) })))], handle: Some(11), index: None, comment: None })), ListObject(Table(Table { family: INet, name: "test-table", handle: Some(25) })), ListObject(Chain(Chain { family: INet, table: "test-table", name: "test-chain", newname: None, handle: Some(1), _type: Some(Filter), hook: Some(Input), prio: Some(-450), dev: None, policy: Some(Accept) })), ListObject(Rule(Rule { family: INet, table: "test-table", chain: "test-chain", expr: [Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)], handle: Some(2), index: None, comment: None }))]
01:37:51.369 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: String("invalid"), op: IN }), Drop(None)]
01:37:51.369 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(CT(CT { key: "state", family: None, dir: None })), right: Named(Set([Element(String("established")), Element(String("related"))])), op: EQ }), Accept(None)]
01:37:51.369 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:51.369 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "ip", field: "protocol" }))), right: String("icmp"), op: EQ }), Accept(None)]
01:37:51.369 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: L4proto })), right: String("ipv6-icmp"), op: EQ }), Accept(None)]
01:37:51.369 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Payload(PayloadField(PayloadField { protocol: "tcp", field: "dport" }))), right: Number(22), op: EQ }), Accept(None)]
01:37:51.369 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Pkttype })), right: String("host"), op: EQ }), Limit(Limit { rate: 5, rate_unit: None, per: Some("second"), burst: Some(5), burst_unit: None, inv: None }), Counter(Anonymous(Some(AnonymousCounter { packets: Some(997), bytes: Some(316617) }))), Reject(Some(Reject { _type: Some(ICMPX), expr: Some(AdminProhibited) }))]
01:37:51.369 [DEBUG] firewall_rs::netlink: current statement:
[Counter(Anonymous(Some(AnonymousCounter { packets: Some(2998), bytes: Some(328693) })))]
01:37:51.369 [DEBUG] firewall_rs::netlink: current statement:
[Match(Match { left: Named(Meta(Meta { key: Iif })), right: String("lo"), op: EQ }), Accept(None)]
01:37:51.372 [DEBUG] mnl::socket: Sending 84 byte netlink message
01:37:51.372 [DEBUG] mnl::callback: Processing 36 byte netlink message without a callback
01:37:51.386 [DEBUG] firewall_rs::cli: task ended: Ok(())
01:37:51.386 [DEBUG] firewall_rs: CLI exited
